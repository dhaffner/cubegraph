{"version":3,"sources":["helpers.js","Face.js","TurnPicker.js","CubeController.tsx","ForceGraph.js","PathList.js","hooks.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["SOLVED_CUBE","ORDER","uniq","StyledFace","styled","colors","className","map","theme","U","palette","background","paper","D","secondary","dark","F","success","B","info","L","warning","R","error","getFaceColors","useTheme","class","color","i","key","style","backgroundColor","useStyles","makeStyles","createStyles","root","margin","TurnPicker","moves","addMove","onHover","nextMove","columns","length","push","slice","source","isEmpty","console","log","Box","Grid","container","xs","column","move","face","target","offset","indexOf","substring","split","md","justify","alignItems","direction","marginBottom","item","spacing","ButtonGroup","variant","aria-label","fullWidth","padding","Button","onClick","onMouseEnter","main","StyledCube","faces","onChange","neighbors","ref","React","useRef","useEffect","undefined","current","addEventListener","moving","delay","ThemedCube","props","ForceGraph","cube","path","width","height","hovered","fgRef","useState","links","nodes","graph","setGraph","clicked","setClicked","Set","visited","setVisited","allNodes","forEach","id","add","newNodes","filter","has","filteredLinks","clone","node","x","index","y","centerAt","panToNode","neighborIds","pathIds","COLORS","CURRENT","primary","light","NEIGHBOR","PATH","OTHER","VISITED","SOLUTION","HOVERED","nodeRelSize","graphData","nodeLabel","linkColor","linkOpacity","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleSpeed","onMouseLeave","zoomToFit","cooldownTicks","cooldownTime","nodeColor","nodeVal","now","onNodeDragEnd","fx","fy","onNodeClick","event","setTimeout","getSolutionPath","gql","minWidth","maxHeight","overflow","bullet","display","transform","pos","fontSize","PathList","steps","setFaces","setNextMove","setPath","classes","truePath","findIndex","first","Divider","ListItem","button","ListItemText","useQuery","variables","data","loading","Card","CardContent","get","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","previous","sample","randomCubes","updateFaces","newFaces","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","default","type","ThemeProvider","CssBaseline","orientation","Container","prevFaces","initialValue","rect","setRect","useCallback","getBoundingClientRect","useClientRect","setHover","changeFaces","m","cloneDeep","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sdACaA,EACX,yDACWC,EAAQC,eAAKF,G,2RCe1B,IAaeG,EAbEC,aAbjB,YAAsC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAEhBC,EDFD,SAAuBC,GAC5B,MAAO,CACLC,EAAGD,EAAME,QAAQC,WAAWC,MAC5BC,EAAGL,EAAME,QAAQI,UAAUC,KAC3BC,EAAGR,EAAME,QAAQO,QAAQF,KACzBG,EAAGV,EAAME,QAAQS,KAAKJ,KACtBK,EAAGZ,EAAME,QAAQW,QAAQN,KACzBO,EAAGd,EAAME,QAAQa,MAAMR,MCLbS,CADEC,eAEZ,OACI,yBAAKC,MAAOpB,GACPD,EAAOE,KAAI,SAACoB,EAAOC,GAAR,OACR,yBAAKC,IAAKD,EAAGE,MAAO,CAAEC,gBAAiBxB,EAAIoB,YAO1CvB,CAAH,KCTR4B,EAAYC,aAAW,SAACzB,GAAD,OACzB0B,YAAa,CACTC,KAAM,CACFC,OAAQ,QAKL,SAASC,EAAT,GAKX,IALuE,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAEtDjC,GADYwB,IACJP,eAERiB,EAAU,GACLd,EAAI,EAAGA,EAAIU,EAAMK,OAAQf,GAFtB,EAGRc,EAAQE,KAAKN,EAAMO,MAAMjB,EAAGA,EAHpB,IAH0D,IAQhEkB,GAAWR,EAAMK,OAAS,EAAIL,EAAM,GAAK,IAAzCQ,OACN,OAAIC,kBAAQD,GAAgB,gCAC5BE,QAAQC,IAAI,WAAYR,GAEpB,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,GAAI,IAIHX,EAAQnC,KAAI,SAAC+C,EAAQ1B,GAAO,IAAD,EACD0B,EAAO,GAAxBC,EADkB,EAClBA,KACFC,GAFoB,EACZC,OACDF,EAAK,IACZG,EAA+B,EAAtBzD,EAAM0D,QAAQH,GACvBnD,EAASyC,EAAOc,UAAUF,EAAQA,EAAS,GAAGG,MAAM,IACxD,OACI,kBAACV,EAAA,EAAD,CACItB,IAAK2B,EACLJ,WAAS,EACTC,GAAI,GACJS,GAAI,EACJC,QAAQ,gBACRC,WAAW,SACXC,UAAU,MACVnC,MAAO,CAAEoC,aAAc,KAGvB,kBAACf,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,GACX,kBAAC,EAAD,CAAMhD,OAAQA,KAElB,kBAAC8C,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,GAAIe,QAAS,GACxB,kBAACC,EAAA,EAAD,CACIxC,IAAKD,EACL0C,QAAQ,OACRC,aAAW,4BACXC,WAAW,EACX1C,MAAO,CAAE2C,QAAS,KAEjBnB,EAAO/C,KAAI,cAAGuC,OAAH,IAAWW,EAAX,EAAWA,OAAQF,EAAnB,EAAmBA,KAAnB,OACR,kBAACmB,EAAA,EAAD,CACI7C,IAAK0B,EACLoB,QAAS,kBAAMpC,EAAQgB,EAAME,IAC7BmB,aAAc,kBAAMpC,EAAQiB,IAC5B3B,MAAO,CACHC,gBACIU,GAAYA,EAASc,MAAQA,EACvB/C,EAAME,QAAQO,QAAQ4D,KACtB,gBAGbtB,e,6OC5D7C,IA2DMuB,EAAa1E,aA3DD,SAAC,GAAkE,IAAhEE,EAA+D,EAA/DA,UAAWyE,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,UAAWzC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC3DyC,EAAMC,IAAMC,SAiDlB,OA/CAC,qBAAU,gBACMC,IAARJ,QAGqBI,IAAhBJ,EAAIK,SAKbL,EAAIK,QAAQC,iBAAiB,iBAAiB,WAC1CxC,QAAQC,IAAI,sBAGjB,IAEHoC,qBAAU,WACN,QAAYC,IAARJ,QAGqBI,IAAhBJ,EAAIK,cAGCD,IAAVP,IAAuBhC,kBAAQgC,GAAnC,CAPY,IAWNQ,EAAYL,EAAZK,QAEDA,EAAQE,SAETF,EAAQR,MAAQA,MAGrB,CAACA,IAeA,yBAAKzE,UAAWA,GACZ,gCAAY4E,IAAKA,IACjB,kBAAC7C,EAAD,CAAYR,IAAKkD,EAAOxC,QAfhC,SAAiBgB,EAAME,QACP6B,IAARJ,QAGqBI,IAAhBJ,EAAIK,UAIbL,EAAIK,QAAQhD,QAAQgB,GACpBmC,iBAAM,kBAAMV,EAASvB,KAAS,OAMgBnB,MAAO2C,EAAWzC,QAASA,EAASC,SAAUA,OAMjFrC,CAAH,KACE,qBAAGI,MAAkBE,QAAQC,WAAWC,SACxC,qBAAGJ,MAAkBE,QAAQI,UAAUC,QACvC,qBAAGP,MAAkBE,QAAQO,QAAQF,QACrC,qBAAGP,MAAkBE,QAAQS,KAAKJ,QAClC,qBAAGP,MAAkBE,QAAQW,QAAQN,QACrC,qBAAGP,MAAkBE,QAAQa,MAAMR,QAKtC,SAAS4E,EAAWC,GAC/B,IAAIpF,EAAQiB,cACZ,OAAO,kBAACqD,EAAD,eAAYtE,MAAOA,GAAWoF,I,4BCjF1B,SAASC,EAAT,GAQX,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,KACAd,EAKC,EALDA,UACAe,EAIC,EAJDA,MACAC,EAGC,EAHDA,OACAtB,EAEC,EAFDA,QACAuB,EACC,EADDA,QAEMC,EAAQf,mBAER5E,EAAQiB,cAHb,EAKuB2E,mBAAS,CAAEC,MAAO,GAAIC,MAAO,KALpD,mBAKIC,EALJ,KAKWC,EALX,OAM2BJ,mBAASN,GANpC,mBAMIW,EANJ,KAMaC,EANb,OAO2BN,mBAAS,IAAIO,KAPxC,mBAOIC,EAPJ,KAOaC,EAPb,KAQGC,EAAW,IAAIH,IAsBnBtB,qBAAU,WACRrC,QAAQC,IAAI,cACZuD,GAAS,YAAuB,IAApBH,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACjBA,EAAMS,SAAQ,YAAa,IAAVC,EAAS,EAATA,GACfF,EAASG,IAAID,MAGf,IAAIE,EAAW,CAACpB,GAChBb,EAAU8B,SAAQ,YAAyB,IAAtBjE,EAAqB,EAArBA,OAAQW,EAAa,EAAbA,OAC3ByD,EAAStE,KAAKE,EAAQW,MAExBsC,EAAKgB,SAAQ,YAAyB,IAAtBjE,EAAqB,EAArBA,OAAQW,EAAa,EAAbA,OACtByD,EAAStE,KAAKE,EAAQW,MAGxByD,EAAWhH,eAAKgH,GAAUC,QAAO,SAACH,GAAD,OAASF,EAASM,IAAIJ,MACvD,IAAIK,EAAgB,sBAAIC,oBAAMvB,IAAV,YAAoBuB,oBAAMrC,KAAYkC,QACxD,gBAAGrE,EAAH,EAAGA,OAAQW,EAAX,EAAWA,OAAX,QAA0BqD,EAASM,IAAItE,IAAWgE,EAASM,IAAI3D,OAGjE,MAAO,CACL6C,MAAM,GAAD,mBACAA,GADA,YAEAY,EAAS3G,KAAI,SAACgH,GACf,OAAOA,GAAQA,EAAKP,GAAKO,EAAO,CAAEP,GAAIO,QAG1ClB,MAAM,GAAD,mBAAMA,GAAN,YAAgBgB,UAGxB,CAACpC,EAAWc,IAEfV,qBAAU,WACRmB,GAAS,YAAuB,IAApBH,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAGjB,OA9CY,SAACA,EAAOU,GACtB,IAAK,IAAIpF,EAAI,EAAGA,EAAI0E,EAAM3D,SAAUf,EAClC,GAAI0E,EAAM1E,GAAGoF,KAAOA,EAApB,CADqC,MAEfV,EAAM1E,GAAf4F,GAFwB,EAE/BC,MAF+B,EAExBD,GAAGE,EAFqB,EAErBA,EAGZF,GAAKE,GAAKvB,GAASA,EAAMZ,SAASY,EAAMZ,QAAQoC,SAASH,EAAGE,EAAG,MAuCnEE,CAAUtB,EAAOR,GACV,CAAEO,QAAOC,YAElBI,EAAWZ,KACV,CAACA,IAEJ,IAAI+B,EAAc,IAAIlB,IAAI1B,EAAU1E,KAAI,qBAAGkD,WACvCqE,EAAU,IAAInB,IAAJ,CAASb,GAAT,mBAAkBC,EAAKxF,KAAI,qBAAGkD,aAExCsE,EAAS,CACXC,QAASxH,EAAME,QAAQuH,QAAQC,MAC/BC,SAAU3H,EAAME,QAAQI,UAAUoH,MAClCE,KAAM5H,EAAME,QAAQS,KAAK0D,KACzBwD,MAAO,OACPC,QAAS9H,EAAME,QAAQI,UAAUC,KACjCwH,SAAU/H,EAAME,QAAQO,QAAQ4D,KAChC2D,QAAShI,EAAME,QAAQW,QAAQ6G,OA4BjC,OADAlF,QAAQC,IAAI,mBAEV,kBAAC,IAAD,CACEiC,IAAKiB,EAELH,MAAOA,EACPC,OAAQA,EACRwC,YAAa,EACbC,UAAWnC,EACXoC,UAAU,KACVC,UAAW,iBAAM,QACjBC,YAAa,iBAAM,KACnBC,6BAA8B,iBAAM,QACpCC,yBAA0B,EAC1BC,6BAA8B,KAC9BC,aAAc,kBAAM9C,EAAMZ,QAAQ2D,UAAU,MAC5CC,cAAe,IACfC,aAAc,KACdC,UA3CJ,YAA2B,IAAPrC,EAAM,EAANA,GAClB,OAAIA,IAAOhH,EAAoB+H,EAAOQ,SAClCvB,IAAOP,EAAgBsB,EAAOC,QAC9BhB,IAAOd,EAAgB6B,EAAOS,QACzBX,EAAYT,IAAIJ,GAAYe,EAAOI,SACnCL,EAAQV,IAAIJ,GAAYe,EAAOK,KAC/BxB,EAAQQ,IAAIJ,GAAYe,EAAOO,QAEjCP,EAAOM,OAoCZiB,QAlCJ,YAAyB,IAAPtC,EAAM,EAANA,GAChB,OAAId,IAAYc,EAEP,EADCuC,gBAxGO,QAyGmB,EAEhCvJ,IAAgBgH,EACX,GAELA,IAAOlB,EAAa,GACfc,EAAQQ,IAAIJ,GAAY,EACxBc,EAAQV,IAAIJ,GAAY,GACxBa,EAAYT,IAAIJ,GAAY,IAwBnCwC,cAAe,SAACjC,GACdA,EAAKkC,GAAKlC,EAAKC,EACfD,EAAKmC,GAAKnC,EAAKG,GAEjBiC,YAAa,SAACpC,EAAMqC,GAClBpD,GAAS,YAAuB,IAApBF,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,MAEjB,OADAkB,EAAKA,EAAKE,OAAV,eAAwBF,EAAxB,CAA8BkC,GAAIlC,EAAKC,EAAGkC,GAAInC,EAAKG,IAC5C,CAAEpB,QAAOD,YAElBQ,GAAW,SAACD,GAAD,OAAaA,EAAQK,IAAIM,EAAKP,OACzC6C,YAAW,WACTlF,EAAQ4C,KACP,Q,mRCzIX,IAAMuC,EAAkBC,YAAH,KAUf/H,EAAYC,YAAW,CAC3BE,KAAM,CACJ6H,SAAU,OACVC,UAAW,OACXC,SAAU,QAEZC,OAAQ,CACNC,QAAS,eACThI,OAAQ,QACRiI,UAAW,cAKbC,IAAK,CACHpG,aAAc,IAEhB+D,QAAS,CACPsC,SAAU,MAIP,SAASC,EAAT,GAA6D,IAAzC1H,EAAwC,EAAxCA,OAAQ2H,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAAe,EAC3CvE,mBAAS,IADkC,mBAC5DL,EAD4D,KACtD6E,EADsD,KAE3DC,EAAU7I,IAmBhB,OAlBAqD,qBAAU,WAER,IACEyF,EADErD,EAAQ1B,EAAKgF,WAAU,qBAAGtH,QAAuBX,KAEjD2E,EAAQ,GAEVqD,EAAWL,EACXzH,QAAQC,IAAI,iBAEZ6H,EAAW/E,EAAKlD,MAAM4E,EAAQ,GAEhCmD,EAAQE,KACP,CAAChI,EAAQ2H,IAEZpF,qBAAU,WACR,IAAI2F,EAAQjF,EAAKpD,OAAS,GAAKoD,EAAK,GACpC4E,EAAYK,GAAgB,QAC3B,CAACjF,IAEF,kBAAC5C,EAAA,EAAD,CAAMC,WAAS,GACZ2C,EAAKxF,KAAI,WAAmBqB,GAAnB,IAAG6B,EAAH,EAAGA,OAAQF,EAAX,EAAWA,KAAX,OACR,kBAAC,WAAD,CAAU1B,IAAK4B,GACZ7B,EAAI,GAAK,kBAACqJ,EAAA,EAAD,MACV,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNtJ,IAAK4B,EACLkB,QAAS,WACP+F,EAASjH,KAMX,kBAAC2H,EAAA,EAAD,CACE9K,UAAWuK,EAAQ5C,QACnBA,QAAO,UAAKrG,EAAI,EAAT,aAAe2B,GACtBzC,UAAW2C,UASV,kBAA6C,IAAjCsB,EAAgC,EAAhCA,MAAO2F,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACpCE,EAAU7I,IADyC,EAGxBqJ,YAASvB,EAAiB,CACzDwB,UAAW,CAAExI,OAAQiC,EAAOtB,OAAQzD,KADduL,GAHiC,EAGjDC,QAHiD,EAGxCjK,MAHwC,EAGjCgK,MAIxB,OACE,kBAACE,EAAA,EAAD,CAAMnL,UAAWuK,EAAQ1I,MACvB,kBAACuJ,EAAA,EAAD,KACE,kBAAClB,EAAD,CACEC,MAAOkB,cAAIJ,EAAM,OAAQ,IACzBzI,OAAQiC,EACR2F,SAAUA,EACVC,YAAaA,OChFR,I,4dCff,IAAMiB,GAAS,IAAIC,IAAa,CAC5BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACfC,IAAK,eAKPpC,GAAkBC,YAAH,KAaGA,YAAH,KAWrB,SAASoC,KAAO,IAAD,EACgB/F,mBAAS,CAAEgG,SAAU,KAAM7G,QAAS8G,iBAAOC,KAD3D,mBACNvH,EADM,KACCwH,EADD,KAGP7B,EAAW,SAAA8B,GACOzH,EAAZQ,UACUiH,GACZD,GAAY,kBAAkB,CAAEH,SAApB,EAAG7G,QAAoCA,QAASiH,OAI9DC,EAAkBC,YAAc,gCAChClM,EAAQ2E,IAAMwH,SAChB,kBACIC,YAAe,CACXlM,QAAS,CACLC,WAAY,CACRkM,QAAS,sBAEbC,KAAOL,EAA2B,QAAT,YAGrC,CAACA,IAKL,OAFAzJ,QAAQC,IAAIzC,GAGR,kBAACuM,EAAA,EAAD,CAAevM,MAAOA,GAClB,kBAACwM,EAAA,EAAD,MACA,yBAAK1M,UAAU,qBACX,kBAAC+D,EAAA,EAAD,CAAa1C,MAAM,UAAU4C,aAAW,gCAAgC0I,YAAY,YAChF,kBAACvI,EAAA,EAAD,CAAQC,QAAS,WACb+F,EAAS2B,iBAAOC,MADpB,UAGA,kBAAC5H,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,gBAGR,kBAACwI,GAAD,CAAWnI,MAAOA,EAAMQ,QAAS6G,SAAUrH,EAAMqH,UAAYpM,EAAa0K,SAAUA,KAMhG,SAASwC,GAAT,GAA8D,IAAzCnI,EAAwC,EAAxCA,MAAO2F,EAAiC,EAAjCA,SAAoByC,EAAa,EAAvBf,SAAuB,EDxEtD,WAA2C,IAApBgB,EAAmB,uDAAN,KAAM,EACrBhH,mBAASgH,GADY,mBACtCC,EADsC,KAChCC,EADgC,KAEvCpI,EAAMqI,uBAAY,SAAAhG,GACT,OAATA,GACF+F,EAAQ/F,EAAKiG,2BAEd,IACH,MAAO,CAACH,EAAMnI,GCkEIuI,CAAc,CAAEzH,MAAO,IAAKC,OAAQ,MADG,mBACpDoH,EADoD,KAC9CnI,EAD8C,OAE/BkB,mBAAS,MAFsB,mBAEpDF,EAFoD,KAE3CwH,EAF2C,OAG3BtH,mBAAS,MAHkB,mBAGpD3D,EAHoD,KAG1CkI,EAH0C,OAIxBU,YAASvB,GAAiB,CACvDwB,UAAW,CACPxI,OAAQiC,EACRtB,OAAQ0J,KAHQ5B,GAJiC,EAIjDC,QAJiD,EAIxCjK,MAJwC,EAIjCgK,MAMxB,SAASoC,EAAYnB,GACjB9B,EAAS8B,GAGb,OACI,kBAACrJ,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,EAAG/C,UAAU,QACxB,kBAAC6C,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,IACX,kBAACH,EAAA,EAAD,CAAK0K,EAAG,GAEJ,kBAAC,EAAD,CACI/L,IAAKkD,EACLA,MAAOA,EACPC,SAAU2I,EACV1I,UAAW4I,oBAAUlC,cAAIJ,EAAM,YAAa,KAC5C/I,QAAS,SAACsD,GAAD,OAAU4H,EAAS5H,IAC5BrD,SAAUA,MAItB,kBAACU,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,IACX,kBAACH,EAAA,EAAD,CAAK0K,EAAG,GACJ,kBAAC,EAAD,CAAM7I,MAAOA,EAAO2F,SAAUiD,EAAahD,YAAaA,OAIpE,kBAACxH,EAAA,EAAD,CAAMgB,MAAI,EAACd,GAAI,EAAG/C,UAAU,QAAQ4E,IAAKA,GACrC,kBAAC,EAAD,CACIY,KAAMf,EACNiB,MAAOqH,EAAKrH,MACZC,OAAQoH,EAAKpH,OACbF,KAAM4F,cAAIJ,EAAM,OAAQ,IACxB5G,QAAS,mBAAYgJ,EAAZ,EAAG3G,KACZd,QAASA,EACTjB,UAAW0G,cAAIJ,EAAM,YAAa,QAMvC,yBACX,kBAAC,IAAD,CAAgBK,OAAQA,IACpB,kBAAC,GAAD,QCrIYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,GAAD,MACAC,SAASC,eAAe,SDmItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtN,GACLyB,QAAQzB,MAAMA,EAAMuN,a","file":"static/js/main.94121cf4.chunk.js","sourcesContent":["import { uniq } from \"lodash\";\nexport const SOLVED_CUBE =\n  \"UUUUUUUUURRRRRRRRRFFFFFFFFFDDDDDDDDDLLLLLLLLLBBBBBBBBB\";\nexport const ORDER = uniq(SOLVED_CUBE);\n\nexport function getFaceColors(theme) {\n  return {\n    U: theme.palette.background.paper,\n    D: theme.palette.secondary.dark,\n    F: theme.palette.success.dark,\n    B: theme.palette.info.dark,\n    L: theme.palette.warning.dark,\n    R: theme.palette.error.dark,\n  };\n}\nexport default {};\n","import { useTheme } from '@material-ui/core/styles';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { getFaceColors } from './helpers';\n\nfunction Face({ colors, className }) {\n    let theme = useTheme();\n    let map = getFaceColors(theme);\n    return (\n        <div class={className}>\n            {colors.map((color, i) =>\n                <div key={i} style={{ backgroundColor: map[color] }}>\n                </div>\n            )}\n        </div>\n    );\n}\n\nlet StyledFace = styled(Face)`\ndisplay: grid;\ngrid-gap: 1px;\ngrid-template-columns: repeat(3, 1fr);\nborder: 1px solid black;\nbackground-color: black;\n> div::before {\n    content: \"\";\n    padding-bottom: 100%;\n    display: block;\n  }\n`;\n\nexport default StyledFace;\n","import Button from \"@material-ui/core/Button\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport Face from \"./Face\";\nimport { ORDER } from \"./helpers\";\nimport { isEmpty } from \"lodash\";\nimport { useTheme } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            margin: 0,\n        },\n    })\n);\n\nexport default function TurnPicker({ moves, addMove, onHover, nextMove }) {\n    const classes = useStyles();\n    let theme = useTheme();\n    let count = 3;\n    let columns = [];\n    for (let i = 0; i < moves.length; i += count) {\n        columns.push(moves.slice(i, i + count));\n    }\n    let { source } = moves.length > 0 ? moves[0] : {};\n    if (isEmpty(source)) return <span />;\n    console.log(\"nextmove\", nextMove);\n    return (\n        <Box>\n            <Grid\n                container\n                xs={12}\n            // justify=\"space-between\"\n            // alignItems=\"flex-end\"\n            >\n                {columns.map((column, i) => {\n                    let { move, target } = column[0];\n                    let face = move[0];\n                    let offset = ORDER.indexOf(face) * 9;\n                    let colors = source.substring(offset, offset + 9).split(\"\");\n                    return (\n                        <Grid\n                            key={face}\n                            container\n                            xs={12}\n                            md={6}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                            direction=\"row\"\n                            style={{ marginBottom: 20 }}\n\n                        >\n                            <Grid item xs={2}>\n                                <Face colors={colors} />\n                            </Grid>\n                            <Grid item xs={10} spacing={2}>\n                                <ButtonGroup\n                                    key={i}\n                                    variant=\"text\"\n                                    aria-label=\"text primary button group\"\n                                    fullWidth={true}\n                                    style={{ padding: 10 }}\n                                >\n                                    {column.map(({ source, target, move }) => (\n                                        <Button\n                                            key={move}\n                                            onClick={() => addMove(move, target)}\n                                            onMouseEnter={() => onHover(target)}\n                                            style={{\n                                                backgroundColor:\n                                                    nextMove && nextMove.move == move\n                                                        ? theme.palette.success.main\n                                                        : \"transparent\",\n                                            }}\n                                        >\n                                            {move}\n                                        </Button>\n                                    ))}\n                                </ButtonGroup>\n                            </Grid>\n                        </Grid>\n                    );\n                })}\n            </Grid>\n        </Box>\n    );\n}\n","import \"@scarygami/scary-cube\";\nimport { isEmpty, delay } from 'lodash';\nimport React, { useEffect } from \"react\";\nimport TurnPicker from './TurnPicker';\nimport styled from 'styled-components';\nimport { withTheme } from 'styled-components';\nimport { useTheme } from '@material-ui/core/styles';\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            \"scary-cube\": any;\n        }\n    }\n}\n\n\nconst ScaryCube = ({ className, faces, onChange, neighbors, onHover, nextMove }) => {\n    const ref = React.useRef();\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n\n        // @ts-ignore\n        ref.current.addEventListener('move-finished', () => {\n            console.log('move-finished');\n\n        });\n    }, [])\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        if (faces === undefined || isEmpty(faces)) {\n            return;\n        }\n        // @ts-ignore\n        let { current } = ref;\n        // @ts-ignore\n        if (!current.moving) {\n            // @ts-ignore\n            current.faces = faces;\n        }\n\n    }, [faces]);\n\n    function addMove(move, target) {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        // @ts-ignore\n        ref.current.addMove(move);\n        delay(() => onChange(target), 100);\n    }\n\n    return (\n        <div className={className}>\n            <scary-cube ref={ref}></scary-cube>\n            <TurnPicker key={faces} addMove={addMove} moves={neighbors} onHover={onHover} nextMove={nextMove} />\n        </div>\n    );\n}\n\n\nconst StyledCube = styled(ScaryCube)`\n--cube-color-u: ${({ theme }) => theme.palette.background.paper};\n--cube-color-d: ${({ theme }) => theme.palette.secondary.dark};\n--cube-color-f: ${({ theme }) => theme.palette.success.dark};\n--cube-color-b: ${({ theme }) => theme.palette.info.dark};\n--cube-color-l: ${({ theme }) => theme.palette.warning.dark};\n--cube-color-r: ${({ theme }) => theme.palette.error.dark};\nmin-height: 100%;\nmargin: auto;\n`;\n\nexport default function ThemedCube(props) {\n    let theme = useTheme();\n    return <StyledCube theme={theme} {...props} />;\n}","import { useTheme } from \"@material-ui/core/styles\";\nimport { uniq, cloneDeep as clone, now } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { SOLVED_CUBE } from \"./helpers\";\n\nlet PULSE_INTERVAL = 2000;\nexport default function ForceGraph({\n  cube,\n  path,\n  neighbors,\n  width,\n  height,\n  onClick,\n  hovered,\n}) {\n  const fgRef = useRef();\n\n  const theme = useTheme();\n\n  let [graph, setGraph] = useState({ links: [], nodes: [] });\n  let [clicked, setClicked] = useState(cube);\n  let [visited, setVisited] = useState(new Set());\n  let allNodes = new Set();\n\n  let fixNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; ++i) {\n      if (nodes[i].id !== id) continue;\n      let { index, x, y } = nodes[i];\n      nodes[index] = { ...nodes[index], fx: x, fy: y };\n      console.log(\"fixed\", id, x, y);\n      return nodes[index];\n    }\n  };\n\n  let panToNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; ++i) {\n      if (nodes[i].id !== id) continue;\n      let { index, x, y } = nodes[i];\n      //   nodes[index] = { ...nodes[index], fx: x, fy: y };\n      //   console.log(\"fixed\", id, x, y);\n      if (x && y && fgRef && fgRef.current) fgRef.current.centerAt(x, y, 500);\n      // return nodes[index];\n    }\n  };\n  useEffect(() => {\n    console.log(\"useEffect!\");\n    setGraph(({ links, nodes }) => {\n      nodes.forEach(({ id }) => {\n        allNodes.add(id);\n      });\n\n      let newNodes = [cube];\n      neighbors.forEach(({ source, target }) => {\n        newNodes.push(source, target);\n      });\n      path.forEach(({ source, target }) => {\n        newNodes.push(source, target);\n      });\n\n      newNodes = uniq(newNodes).filter((id) => !allNodes.has(id));\n      let filteredLinks = [...clone(path), ...clone(neighbors)].filter(\n        ({ source, target }) => !(allNodes.has(source) && allNodes.has(target))\n      );\n\n      return {\n        nodes: [\n          ...nodes,\n          ...newNodes.map((node) => {\n            return node && node.id ? node : { id: node };\n          }),\n        ],\n        links: [...links, ...filteredLinks],\n      };\n    });\n  }, [neighbors, path]);\n\n  useEffect(() => {\n    setGraph(({ links, nodes }) => {\n      //   fixNode(nodes, cube);\n      panToNode(nodes, cube);\n      return { links, nodes };\n    });\n    setClicked(cube);\n  }, [cube]);\n\n  let neighborIds = new Set(neighbors.map(({ target }) => target));\n  let pathIds = new Set([cube, ...path.map(({ target }) => target)]);\n\n  let COLORS = {\n    CURRENT: theme.palette.primary.light,\n    NEIGHBOR: theme.palette.secondary.light,\n    PATH: theme.palette.info.main,\n    OTHER: \"#333\",\n    VISITED: theme.palette.secondary.dark,\n    SOLUTION: theme.palette.success.main,\n    HOVERED: theme.palette.warning.light,\n  };\n  function getColor({ id }) {\n    if (id === SOLVED_CUBE) return COLORS.SOLUTION;\n    if (id === clicked) return COLORS.CURRENT;\n    if (id === hovered) return COLORS.HOVERED;\n    else if (neighborIds.has(id)) return COLORS.NEIGHBOR;\n    else if (pathIds.has(id)) return COLORS.PATH;\n    else if (visited.has(id)) return COLORS.VISITED;\n\n    return COLORS.OTHER;\n  }\n  function getVal({ id }) {\n    if (hovered === id) {\n      let t = now() % PULSE_INTERVAL;\n      return 5 + (t / PULSE_INTERVAL) * 4;\n    }\n    if (SOLVED_CUBE === id) {\n      return 20;\n    }\n    if (id === cube) return 15;\n    else if (visited.has(id)) return 4;\n    else if (pathIds.has(id)) return 5;\n    else if (neighborIds.has(id)) return 1;\n    return 1;\n  }\n\n  console.log(\"Graph render...\");\n  return (\n    <ForceGraph2D\n      ref={fgRef}\n      //   nodeCanvasObject={drawNode}\n      width={width}\n      height={height}\n      nodeRelSize={4}\n      graphData={graph}\n      nodeLabel=\"id\"\n      linkColor={() => \"#aaa\"}\n      linkOpacity={() => 0.05}\n      linkDirectionalParticleColor={() => \"#666\"}\n      linkDirectionalParticles={2}\n      linkDirectionalParticleSpeed={5 * 0.001}\n      onMouseLeave={() => fgRef.current.zoomToFit(100)}\n      cooldownTicks={2000}\n      cooldownTime={1500}\n      nodeColor={getColor}\n      nodeVal={getVal}\n      onNodeDragEnd={(node) => {\n        node.fx = node.x;\n        node.fy = node.y;\n      }}\n      onNodeClick={(node, event) => {\n        setGraph(({ nodes, links }) => {\n          node[node.index] = { ...node, fx: node.x, fy: node.y };\n          return { nodes, links };\n        });\n        setVisited((visited) => visited.add(node.id));\n        setTimeout(() => {\n          onClick(node);\n        }, 200);\n      }}\n    />\n  );\n}\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Divider, Grid } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"@scarygami/scary-cube\";\nimport { gql } from \"apollo-boost\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport CubeSVG from \"./StaticCube\";\nimport { get } from \"lodash\";\n\nimport { SOLVED_CUBE } from \"./helpers\";\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: \"100%\",\n    maxHeight: \"30vh\",\n    overflow: \"auto\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  //   title: {\n  //     fontSize: 14,\n  //   },\n  pos: {\n    marginBottom: 12,\n  },\n  primary: {\n    fontSize: 10,\n  },\n});\n\nexport function PathList({ source, steps, setFaces, setNextMove }) {\n  let [path, setPath] = useState([]);\n  const classes = useStyles();\n  useEffect(() => {\n    // The source cube has changed; see if it is in our list of steps.\n    let index = path.findIndex(({ target }) => target == source),\n      truePath;\n    if (index < 0) {\n      // Source is a cube outside of our current path; re-start\n      truePath = steps;\n      console.log(\"in the path!\");\n    } else {\n      truePath = path.slice(index + 1);\n    }\n    setPath(truePath);\n  }, [source, steps]);\n\n  useEffect(() => {\n    let first = path.length > 0 && path[0];\n    setNextMove(first ? first : null);\n  }, [path]);\n  return (\n    <Grid container>\n      {path.map(({ target, move }, i) => (\n        <Fragment key={target}>\n          {i > 0 && <Divider />}\n          <ListItem\n            button\n            key={target}\n            onClick={() => {\n              setFaces(target);\n            }}\n          >\n            {/* <ListItemIcon>\n                <CubeIcon faces={target} />\n              </ListItemIcon> */}\n            <ListItemText\n              className={classes.primary}\n              primary={`${i + 1}: ${move}`}\n              secondary={target}\n            />\n          </ListItem>\n        </Fragment>\n      ))}\n    </Grid>\n  );\n}\n\nexport default function ({ faces, setFaces, setNextMove }) {\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(getSolutionPath, {\n    variables: { source: faces, target: SOLVED_CUBE },\n  });\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <PathList\n          steps={get(data, \"path\", [])}\n          source={faces}\n          setFaces={setFaces}\n          setNextMove={setNextMove}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n","import { useRef, useCallback, useState } from 'react';\nexport function useHookWithRefCallback() {\n  const ref = useRef(null);\n  const setRef = useCallback((node) => {\n    if (ref.current) {\n      // Make sure to cleanup any events/references added to the last instance\n    }\n\n    if (node) {\n      // Check if a node is actually passed. Otherwise node would be null.\n      // You can now do what you need to, addEventListeners, measure, etc.\n    }\n\n    // Save a reference to the node\n    ref.current = node;\n  }, []);\n\n  return [setRef];\n}\n\n\nexport function useClientRect(initialValue=null) {\n    const [rect, setRect] = useState(initialValue);\n    const ref = useCallback(node => {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect());\n      }\n    }, []);\n    return [rect, ref];\n  }\n  \n\nexport default () => {};","import { ApolloProvider, useQuery } from '@apollo/react-hooks';\nimport { Box, Grid, CircularProgress, ButtonGroup, Button } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport \"@scarygami/scary-cube\";\nimport { ApolloClient, gql, HttpLink, InMemoryCache } from 'apollo-boost';\nimport React, { useState } from 'react';\nimport './App.css';\nimport CubeController from './CubeController';\nimport Graph from './ForceGraph';\nimport Path from './PathList';\nimport Visitors from './Visitors';\nimport { cloneDeep, isEmpty, get, sample } from 'lodash';\nimport { useClientRect } from './hooks';\nimport randomCubes from './generated-cubes.json';\nimport { SOLVED_CUBE } from './helpers';\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n        uri: '/graphql',\n    })\n});\n\n\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n      neighbors(source: $source) {\n          move, source, target\n      }\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst randomCubeQuery = gql`\nquery {\n    random{\n      id\n      visitors {\n        name,\n        \n      }\n    }  \n}`\n\nfunction App() {\n    let [faces, updateFaces] = useState({ previous: null, current: sample(randomCubes) });\n\n    let setFaces = newFaces => {\n        let { current } = faces;\n        if (current !== newFaces) {\n            updateFaces(({ current }) => ({ previous: current, current: newFaces }));\n        }\n    };\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    background: {\n                        default: \"rgb(242, 245, 182)\"\n                    },\n                    type: !prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    console.log(theme);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className='cubegraph-buttons'>\n                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\" orientation=\"vertical\">\n                    <Button onClick={() => {\n                        setFaces(sample(randomCubes));\n                    }}>Random</Button>\n                    <Button>Zoom out</Button>\n                    <Button>Reset</Button>\n                </ButtonGroup>\n            </div>\n            <Container faces={faces.current} previous={faces.previous || SOLVED_CUBE} setFaces={setFaces} />\n        </ThemeProvider>\n    );\n}\n\n\nfunction Container({ faces, setFaces, previous: prevFaces }) {\n    let [rect, ref] = useClientRect({ width: 500, height: 100 });\n    let [hovered, setHover] = useState(null);\n    let [nextMove, setNextMove] = useState(null);\n    const { loading, error, data } = useQuery(getSolutionPath, {\n        variables: {\n            source: faces,\n            target: prevFaces,\n        },\n    });\n    function changeFaces(newFaces) {\n        setFaces(newFaces);\n    }\n    let LEFT_WIDTH = 4;\n    return (\n        <Grid container>\n            <Grid item xs={5} className='grid'>\n                <Grid item xs={12}>\n                    <Box m={2} >\n\n                        <CubeController\n                            key={faces}\n                            faces={faces}\n                            onChange={changeFaces}\n                            neighbors={cloneDeep(get(data, 'neighbors', []))}\n                            onHover={(cube) => setHover(cube)}\n                            nextMove={nextMove}\n                        />\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box m={2} >\n                        <Path faces={faces} setFaces={changeFaces} setNextMove={setNextMove} />\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid item xs={7} className=\"graph\" ref={ref}>\n                <Graph\n                    cube={faces}\n                    width={rect.width}\n                    height={rect.height}\n                    path={get(data, 'path', [])}\n                    onClick={({ id }) => changeFaces(id)}\n                    hovered={hovered}\n                    neighbors={get(data, 'neighbors', [])} />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default () => (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}