{"version":3,"sources":["helpers.js","Face.js","TurnPicker.js","CubeController.tsx","ForceGraph.js","PathList.js","hooks.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["SOLVED_CUBE","ORDER","uniq","StyledFace","styled","colors","className","map","theme","U","palette","background","paper","D","secondary","dark","F","success","B","info","L","warning","R","error","getFaceColors","useTheme","color","i","key","style","backgroundColor","useStyles","makeStyles","createStyles","root","margin","TurnPicker","moves","addMove","onHover","nextMove","columns","length","push","slice","source","isEmpty","console","log","Box","Grid","container","xs","column","move","face","target","offset","indexOf","substring","split","md","justify","alignItems","direction","item","spacing","ButtonGroup","variant","aria-label","fullWidth","padding","marginRight","Button","onClick","onMouseEnter","main","StyledCube","faces","onChange","neighbors","ref","React","useRef","useEffect","undefined","current","addEventListener","moving","delay","ThemedCube","props","ForceGraph","cube","path","width","height","hovered","fgRef","useState","links","nodes","graph","setGraph","clicked","setClicked","Set","visited","setVisited","allNodes","forEach","id","add","newNodes","filter","has","filteredLinks","clone","node","x","index","y","centerAt","panToNode","neighborIds","pathIds","COLORS","CURRENT","primary","NEIGHBOR","light","PATH","OTHER","VISITED","SOLUTION","HOVERED","isCoolNode","nodeRelSize","graphData","nodeLabel","linkColor","linkOpacity","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleSpeed","cooldownTicks","cooldownTime","nodeColor","nodeVal","now","onNodeDragEnd","fx","fy","onEngineStop","zoomToFit","onNodeClick","event","setTimeout","getSolutionPath","gql","minWidth","maxHeight","overflow","bullet","display","transform","pos","marginBottom","fontSize","HoverableMove","Tooltip","title","PathList","steps","setFaces","setNextMove","setPath","truePath","findIndex","first","useQuery","variables","data","loading","get","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","previous","sample","randomCubes","updateFaces","graphReset","setGraphReset","newFaces","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","default","type","ThemeProvider","CssBaseline","orientation","value","Container","graphKey","prevFaces","initialValue","rect","setRect","useCallback","getBoundingClientRect","useClientRect","setHover","changeFaces","sm","m","cloneDeep","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.55e0cf52.chunk.js","sourcesContent":["import { uniq } from \"lodash\";\nexport const SOLVED_CUBE =\n  \"UUUUUUUUURRRRRRRRRFFFFFFFFFDDDDDDDDDLLLLLLLLLBBBBBBBBB\";\nexport const ORDER = uniq(SOLVED_CUBE);\n\nexport function getFaceColors(theme) {\n  return {\n    U: theme.palette.background.paper,\n    D: theme.palette.secondary.dark,\n    F: theme.palette.success.dark,\n    B: theme.palette.info.dark,\n    L: theme.palette.warning.dark,\n    R: theme.palette.error.dark,\n  };\n}\nexport default {};\n","import { useTheme } from '@material-ui/core/styles';\nimport React from \"react\";\nimport styled from 'styled-components';\nimport { getFaceColors } from './helpers';\n\nfunction Face({ colors, className }) {\n    let theme = useTheme();\n    let map = getFaceColors(theme);\n    return (\n        <div className={className}>\n            {colors.map((color, i) =>\n                <div key={i} style={{ backgroundColor: map[color] }}>\n                </div>\n            )}\n        </div>\n    );\n}\n\nlet StyledFace = styled(Face)`\ndisplay: grid;\ngrid-gap: 1px;\ngrid-template-columns: repeat(3, 1fr);\nborder: 1px solid black;\nbackground-color: black;\n> div::before {\n    content: \"\";\n    padding-bottom: 100%;\n    display: block;\n  }\n`;\n\nexport default StyledFace;\n","import Button from \"@material-ui/core/Button\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport Face from \"./Face\";\nimport { ORDER } from \"./helpers\";\nimport { isEmpty } from \"lodash\";\nimport { useTheme } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            margin: 0,\n        },\n    })\n);\n\nexport default function TurnPicker({ moves, addMove, onHover, nextMove }) {\n    const classes = useStyles();\n    let theme = useTheme();\n    let count = 3;\n    let columns = [];\n    for (let i = 0; i < moves.length; i += count) {\n        columns.push(moves.slice(i, i + count));\n    }\n    let { source } = moves.length > 0 ? moves[0] : {};\n    if (isEmpty(source)) return <span />;\n    console.log(\"nextmove\", nextMove);\n    return (\n        <Box>\n            <Grid\n                container\n                xs={12}\n            // justify=\"space-between\"\n            // alignItems=\"flex-end\"\n            >\n                {columns.map((column, i) => {\n                    let { move, target } = column[0];\n                    let face = move[0];\n                    let offset = ORDER.indexOf(face) * 9;\n                    let colors = source.substring(offset, offset + 9).split(\"\");\n                    return (\n                        <Grid\n                            key={face}\n                            container\n                            xs={6}\n                            md={6}\n                            justify=\"space-between\"\n                            alignItems=\"center\"\n                            direction=\"row\"\n                        >\n                            <Grid item xs={2}>\n                                <Face colors={colors} />\n                            </Grid>\n                            <Grid item xs={10} spacing={1}>\n                                <ButtonGroup\n                                    key={i}\n                                    variant=\"text\"\n                                    aria-label=\"text primary button group\"\n                                    fullWidth={true}\n                                    style={{ padding: 5, marginRight: 5 }}\n                                >\n                                    {column.map(({ source, target, move }) => (\n                                        <Button\n                                            key={move}\n                                            onClick={() => addMove(move, target)}\n                                            onMouseEnter={() => onHover(target)}\n                                            style={{\n                                                backgroundColor:\n                                                    nextMove && nextMove.move == move\n                                                        ? theme.palette.success.main\n                                                        : \"transparent\",\n                                            }}\n                                        >\n                                            {move}\n                                        </Button>\n                                    ))}\n                                </ButtonGroup>\n                            </Grid>\n                        </Grid>\n                    );\n                })}\n            </Grid>\n        </Box>\n    );\n}\n","import \"@scarygami/scary-cube\";\nimport { isEmpty, delay } from 'lodash';\nimport React, { useEffect } from \"react\";\nimport TurnPicker from './TurnPicker';\nimport styled from 'styled-components';\nimport { withTheme } from 'styled-components';\nimport { useTheme } from '@material-ui/core/styles';\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            \"scary-cube\": any;\n        }\n    }\n}\n\n\nconst ScaryCube = ({ className, faces, onChange, neighbors, onHover, nextMove }) => {\n    const ref = React.useRef();\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n\n        // @ts-ignore\n        ref.current.addEventListener('move-finished', () => {\n            console.log('move-finished');\n\n        });\n    }, [])\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        if (faces === undefined || isEmpty(faces)) {\n            return;\n        }\n        // @ts-ignore\n        let { current } = ref;\n        // @ts-ignore\n        if (!current.moving) {\n            // @ts-ignore\n            current.faces = faces;\n        }\n\n    }, [faces]);\n\n    function addMove(move, target) {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        // @ts-ignore\n        ref.current.addMove(move);\n        delay(() => onChange(target), 100);\n    }\n\n    return (\n        <div className={className}>\n            <scary-cube ref={ref}></scary-cube>\n            <TurnPicker key={faces} addMove={addMove} moves={neighbors} onHover={onHover} nextMove={nextMove} />\n        </div>\n    );\n}\n\n\nconst StyledCube = styled(ScaryCube)`\n--cube-color-u: ${({ theme }) => theme.palette.background.paper};\n--cube-color-d: ${({ theme }) => theme.palette.secondary.dark};\n--cube-color-f: ${({ theme }) => theme.palette.success.dark};\n--cube-color-b: ${({ theme }) => theme.palette.info.dark};\n--cube-color-l: ${({ theme }) => theme.palette.warning.dark};\n--cube-color-r: ${({ theme }) => theme.palette.error.dark};\nmin-height: 100%;\nmargin: auto;\n`;\n\nexport default function ThemedCube(props) {\n    let theme = useTheme();\n    return <StyledCube theme={theme} {...props} />;\n}","import { useTheme } from \"@material-ui/core/styles\";\nimport { uniq, cloneDeep as clone, now } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { SOLVED_CUBE } from \"./helpers\";\n\nlet PULSE_INTERVAL = 2000;\nexport default function ForceGraph({\n  cube,\n  path,\n  neighbors,\n  width,\n  height,\n  onClick,\n  hovered,\n}) {\n  const fgRef = useRef();\n\n  const theme = useTheme();\n\n  let [graph, setGraph] = useState({ links: [], nodes: [] });\n  let [clicked, setClicked] = useState(cube);\n  let [visited, setVisited] = useState(new Set());\n  let allNodes = new Set();\n\n  let fixNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; ++i) {\n      if (nodes[i].id !== id) continue;\n      let { index, x, y } = nodes[i];\n      nodes[index] = { ...nodes[index], fx: x, fy: y };\n      console.log(\"fixed\", id, x, y);\n      return nodes[index];\n    }\n  };\n\n  let panToNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; ++i) {\n      if (nodes[i].id !== id) continue;\n      let { index, x, y } = nodes[i];\n      //   nodes[index] = { ...nodes[index], fx: x, fy: y };\n      //   console.log(\"fixed\", id, x, y);\n      if (x && y && fgRef && fgRef.current) fgRef.current.centerAt(x, y, 500);\n      // return nodes[index];\n    }\n  };\n  useEffect(() => {\n    console.log(\"useEffect!\");\n    setGraph(({ links, nodes }) => {\n      nodes.forEach(({ id }) => {\n        allNodes.add(id);\n      });\n\n      let newNodes = [cube];\n    //   neighbors.forEach(({ source, target }) => {\n    //     newNodes.push(source, target);\n    //   });\n      path.forEach(({ source, target }) => {\n        newNodes.push(source, target);\n      });\n\n      newNodes = uniq(newNodes).filter((id) => !allNodes.has(id));\n      let filteredLinks = [...clone(path)].filter(\n        ({ source, target }) => !(allNodes.has(source) && allNodes.has(target))\n      );\n\n      return {\n        nodes: [\n          ...nodes,\n          ...newNodes.map((node) => {\n            return node && node.id ? node : { id: node };\n          }),\n        ],\n        links: [...links, ...filteredLinks],\n      };\n    });\n  }, [path]);\n\n  useEffect(() => {\n    setGraph(({ links, nodes }) => {\n      //   fixNode(nodes, cube);\n      panToNode(nodes, cube);\n      return { links, nodes };\n    });\n    setClicked(cube);\n    setVisited((visited) => visited.add(cube));\n  }, [cube]);\n\n  let neighborIds = new Set(neighbors.map(({ target }) => target));\n  let pathIds = new Set([cube, ...path.map(({ target }) => target)]);\n\n  let COLORS = {\n    CURRENT: theme.palette.primary.dark,\n    NEIGHBOR: theme.palette.secondary.light,\n    PATH: theme.palette.info.main,\n    OTHER: \"#999\",\n    VISITED: theme.palette.primary.light,\n    SOLUTION: theme.palette.success.main,\n    HOVERED: theme.palette.warning.light,\n  };\n  function getColor({ id }) {\n    if (id === SOLVED_CUBE) return COLORS.SOLUTION;\n    if (id === clicked) return COLORS.CURRENT;\n    if (id === hovered) return COLORS.HOVERED;\n    else if (visited.has(id)) return COLORS.VISITED;\n    else if (pathIds.has(id)) return COLORS.PATH;\n    else if (neighborIds.has(id)) return COLORS.NEIGHBOR;\n\n    return COLORS.OTHER;\n  }\n  function getVal({ id }) {\n    if (hovered === id) {\n      let t = now() % PULSE_INTERVAL;\n      return 5 + (t / PULSE_INTERVAL) * 4;\n    }\n    if (SOLVED_CUBE === id) {\n      return 20;\n    }\n    if (id === cube) return 15;\n    else if (visited.has(id)) return 10;\n    else if (pathIds.has(id)) return 5;\n    else if (neighborIds.has(id)) return 1;\n    return 1;\n  }\n\n  function isCoolNode({ id }) {\n    return (\n      id === clicked || id === hovered || neighborIds.has(id) || pathIds.has(id) || id == SOLVED_CUBE || visited.has(id)\n    );\n  }\n\n  function zoomIt() {\n    fgRef.current.zoomToFit(100, 20, isCoolNode)\n  }\n\n  console.log(\"Graph render...\", visited);\n  return (\n    <ForceGraph2D\n      ref={fgRef}\n      //   nodeCanvasObject={drawNode}\n      width={width}\n      height={height}\n      nodeRelSize={4}\n      graphData={graph}\n      nodeLabel=\"id\"\n      linkColor={() => \"#aaa\"}\n      linkOpacity={() => 0.05}\n      linkDirectionalParticleColor={() => \"#666\"}\n      linkDirectionalParticles={2}\n      linkDirectionalParticleSpeed={5 * 0.001}\n      cooldownTicks={2000}\n      cooldownTime={1500}\n      nodeColor={getColor}\n      nodeVal={getVal}\n      onNodeDragEnd={(node) => {\n        node.fx = node.x;\n        node.fy = node.y;\n      }}\n      onEngineStop={() => {\n          zoomIt();\n      }}\n      onNodeClick={(node, event) => {\n        setGraph(({ nodes, links }) => {\n          node[node.index] = { ...node, fx: node.x, fy: node.y };\n          return { nodes, links };\n        });\n        setVisited((visited) => visited.add(node.id));\n        setTimeout(() => {\n          onClick(node);\n        }, 200);\n      }}\n    />\n  );\n}\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Divider, Grid, Tooltip } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"@scarygami/scary-cube\";\nimport { gql } from \"apollo-boost\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport CubeSVG from \"./StaticCube\";\nimport { get } from \"lodash\";\n\nimport { SOLVED_CUBE } from \"./helpers\";\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: \"100%\",\n    maxHeight: \"30vh\",\n    overflow: \"auto\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  //   title: {\n  //     fontSize: 14,\n  //   },\n  pos: {\n    marginBottom: 12,\n  },\n  primary: {\n    fontSize: 10,\n  },\n});\n\nfunction HoverableMove({ move, source, target, onClick }) {\n  return (\n    <Tooltip title={target} aria-label={move}>\n      <span\n        onClick={() => {\n          onClick(target);\n        }}\n      >\n        {move}\n      </span>\n    </Tooltip>\n  );\n}\n\nexport function PathList({ source, steps, setFaces, setNextMove }) {\n  let [path, setPath] = useState([]);\n  const classes = useStyles();\n  useEffect(() => {\n    // The source cube has changed; see if it is in our list of steps.\n    let index = path.findIndex(({ target }) => target == source),\n      truePath;\n    if (index < 0) {\n      // Source is a cube outside of our current path; re-start\n      truePath = steps;\n      console.log(\"in the path!\");\n    } else {\n      truePath = path.slice(index + 1);\n    }\n    setPath(truePath);\n  }, [source, steps]);\n\n  useEffect(() => {\n    let first = path.length > 0 && path[0];\n    setNextMove(first ? first : null);\n  }, [path]);\n  return (\n    <div className='path-list'>\n      {path.map(({ move, target, source }, i) => (\n        <Fragment key={target}>\n          {i > 0 && \"  \"}\n          <HoverableMove\n            key={target}\n            move={move}\n            source={source}\n            target={target}\n            onClick={() => setFaces(target)}\n          />\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n\nexport default function ({ faces, setFaces, setNextMove }) {\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(getSolutionPath, {\n    variables: { source: faces, target: SOLVED_CUBE },\n  });\n\n  return (\n    <PathList\n      steps={get(data, \"path\", [])}\n      source={faces}\n      setFaces={setFaces}\n      setNextMove={setNextMove}\n    />\n  );\n}\n","import { useRef, useCallback, useState } from 'react';\nexport function useHookWithRefCallback() {\n  const ref = useRef(null);\n  const setRef = useCallback((node) => {\n    if (ref.current) {\n      // Make sure to cleanup any events/references added to the last instance\n    }\n\n    if (node) {\n      // Check if a node is actually passed. Otherwise node would be null.\n      // You can now do what you need to, addEventListeners, measure, etc.\n    }\n\n    // Save a reference to the node\n    ref.current = node;\n  }, []);\n\n  return [setRef];\n}\n\n\nexport function useClientRect(initialValue=null) {\n    const [rect, setRect] = useState(initialValue);\n    const ref = useCallback(node => {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect());\n      }\n    }, []);\n    return [rect, ref];\n  }\n  \n\nexport default () => {};","import { ApolloProvider, useQuery } from '@apollo/react-hooks';\nimport { Box, Grid, CircularProgress, ButtonGroup, Button } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport \"@scarygami/scary-cube\";\nimport { ApolloClient, gql, HttpLink, InMemoryCache } from 'apollo-boost';\nimport React, { useState } from 'react';\nimport './App.css';\nimport CubeController from './CubeController';\nimport Graph from './ForceGraph';\nimport Path from './PathList';\nimport Visitors from './Visitors';\nimport { cloneDeep, isEmpty, get, sample } from 'lodash';\nimport { useClientRect } from './hooks';\nimport randomCubes from './generated-cubes.json';\nimport { SOLVED_CUBE } from './helpers';\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n        uri: '/graphql',\n    })\n});\n\n\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n      neighbors(source: $source) {\n          move, source, target\n      }\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst randomCubeQuery = gql`\nquery {\n    random{\n      id\n      visitors {\n        name,\n        \n      }\n    }  \n}`\n\nfunction App() {\n    let [faces, updateFaces] = useState({ previous: null, current: sample(randomCubes) });\n    let [graphReset, setGraphReset] = useState(0);\n\n    let resetGraph = () => setGraphReset(value => value + 1);\n\n    let setFaces = newFaces => {\n        let { current } = faces;\n        if (current !== newFaces) {\n            updateFaces(({ current }) => ({ previous: current, current: newFaces }));\n        }\n    };\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    background: {\n                        default: \"rgb(242, 245, 182)\"\n                    },\n                    type: 'light',\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    console.log(theme);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className='cubegraph-buttons'>\n                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\" orientation=\"vertical\">\n                    <Button onClick={() => {\n                        setFaces(sample(randomCubes));\n                    }}>Random</Button>\n                    {/* <Button>Zoom out</Button> */}\n                    <Button onClick={resetGraph}>Reset</Button>\n                </ButtonGroup>\n            </div>\n            <Container faces={faces.current} previous={faces.previous || SOLVED_CUBE} setFaces={setFaces} graphKey={graphReset} />\n        </ThemeProvider>\n    );\n}\n\n\nfunction Container({ faces, setFaces, previous: prevFaces, graphKey }) {\n    let [rect, ref] = useClientRect({ width: 500, height: 100 });\n    let [hovered, setHover] = useState(null);\n    let [nextMove, setNextMove] = useState(null);\n    const { loading, error, data } = useQuery(getSolutionPath, {\n        variables: {\n            source: faces,\n            target: prevFaces,\n        },\n    });\n    function changeFaces(newFaces) {\n        setFaces(newFaces);\n    }\n    let LEFT_WIDTH = 4;\n    console.log(rect.width, 'x', rect.height);\n    let key = `${rect.width}x${rect.height}x${faces}`\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} sm={5} className='grid'>\n                    <Grid item xs={12}>\n                        <Box m={2} >\n                            <CubeController\n                                key={key}\n                                faces={faces}\n                                onChange={changeFaces}\n                                neighbors={cloneDeep(get(data, 'neighbors', []))}\n                                onHover={(cube) => setHover(cube)}\n                                nextMove={nextMove}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sm={7} className=\"graph\" ref={ref}>\n                    <Graph\n                        key={graphKey}\n                        cube={faces}\n                        width={rect.width}\n                        height={rect.height}\n                        path={get(data, 'path', [])}\n                        onClick={({ id }) => changeFaces(id)}\n                        hovered={hovered}\n                        neighbors={get(data, 'neighbors', [])} />\n                </Grid>\n            </Grid>\n            <Path faces={faces} setFaces={changeFaces} setNextMove={setNextMove} />\n\n        </>\n    );\n}\n\nexport default () => (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}