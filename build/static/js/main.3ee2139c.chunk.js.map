{"version":3,"sources":["helpers.js","Face.js","TurnPicker.js","CubeController.tsx","ForceGraph.js","PathList.js","hooks.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["SOLVED_CUBE","ORDER","uniq","StyledFace","styled","colors","className","map","theme","U","palette","background","paper","D","secondary","dark","F","success","B","info","L","warning","R","error","getFaceColors","useTheme","class","color","i","key","style","backgroundColor","useStyles","makeStyles","createStyles","root","margin","TurnPicker","moves","addMove","onHover","columns","length","push","slice","source","isEmpty","Box","Grid","container","xs","column","move","target","face","offset","indexOf","substring","split","md","justify","alignItems","direction","marginBottom","onMouseEnter","item","ButtonGroup","variant","aria-label","fullWidth","Button","onClick","StyledCube","faces","onChange","neighbors","ref","React","useRef","useEffect","undefined","current","addEventListener","console","log","moving","delay","ThemedCube","props","ForceGraph","cube","path","width","height","hovered","fgRef","useState","links","nodes","graph","setGraph","clicked","setClicked","Set","visited","setVisited","allNodes","forEach","id","add","newNodes","filter","has","filteredLinks","clone","node","index","x","y","fx","fy","fixNode","neighborIds","pathIds","COLORS","CURRENT","primary","light","NEIGHBOR","PATH","main","OTHER","VISITED","SOLUTION","HOVERED","nodeRelSize","graphData","nodeLabel","linkColor","linkOpacity","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleSpeed","onMouseLeave","zoomToFit","cooldownTicks","cooldownTime","nodeColor","nodeVal","now","onNodeDragEnd","onNodeClick","event","getSolutionPath","gql","minWidth","maxHeight","overflow","bullet","display","transform","pos","fontSize","PathList","steps","setFaces","setPath","classes","findIndex","Divider","ListItem","button","ListItemText","useQuery","variables","data","loading","Card","CardContent","get","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","previous","sample","randomCubes","updateFaces","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","default","type","ThemeProvider","CssBaseline","Container","newFaces","prevFaces","initialValue","rect","setRect","useCallback","getBoundingClientRect","useClientRect","setHover","changeFaces","m","cloneDeep","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3ee2139c.chunk.js","sourcesContent":["import { uniq } from \"lodash\";\nexport const SOLVED_CUBE =\n  \"UUUUUUUUURRRRRRRRRFFFFFFFFFDDDDDDDDDLLLLLLLLLBBBBBBBBB\";\nexport const ORDER = uniq(SOLVED_CUBE);\n\nexport function getFaceColors(theme) {\n  return {\n    U: theme.palette.background.paper,\n    D: theme.palette.secondary.dark,\n    F: theme.palette.success.dark,\n    B: theme.palette.info.dark,\n    L: theme.palette.warning.dark,\n    R: theme.palette.error.dark,\n  };\n}\nexport default {};\n","import { isEmpty } from 'lodash';\nimport React, { useEffect } from \"react\";\nimport styled from 'styled-components';\nimport { withTheme } from 'styled-components';\nimport { useTheme } from '@material-ui/core/styles';\nimport { getFaceColors } from './helpers';\n\nfunction Face({ colors, className }) {\n    let theme = useTheme();\n    let map = getFaceColors(theme);\n    return (\n        <div class={className}>\n            {colors.map((color, i) =>\n                <div key={i} style={{ backgroundColor: map[color] }}>\n                </div>\n            )}\n        </div>\n    );\n}\n\nlet StyledFace = styled(Face)`\ndisplay: grid;\ngrid-gap: 1px;\ngrid-template-columns: repeat(3, 1fr);\nborder: 1px solid black;\nbackground-color: black;\n> div::before {\n    content: \"\";\n    padding-bottom: 100%;\n    display: block;\n  }\n`;\n\nexport default StyledFace;\n","import Button from \"@material-ui/core/Button\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport Face from \"./Face\";\nimport { ORDER } from \"./helpers\";\nimport { isEmpty } from \"lodash\";\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n    },\n  })\n);\n\nexport default function TurnPicker({ moves, addMove, onHover }) {\n\n  const classes = useStyles();\n  let count = 3;\n  let columns = [];\n  for (let i = 0; i < moves.length; i += count) {\n    columns.push(moves.slice(i, i + count));\n  }\n  let { source } = moves.length > 0 ? moves[0] : {};\n  if (isEmpty(source)) return <span />;\n  return (\n    <Box>\n      <Grid\n        container\n        xs={12}\n        // justify=\"space-between\"\n        // alignItems=\"flex-end\"\n      >\n        {columns.map((column, i) => {\n          let { move, target } = column[0];\n          let face = move[0];\n          let offset = ORDER.indexOf(face) * 9;\n          let colors = source.substring(offset, offset + 9).split(\"\");\n          return (\n            <Grid\n              key={face}\n              container\n              xs={12}\n              md={6}\n              justify=\"space-between\"\n              alignItems=\"center\"\n              direction=\"row\"\n              style={{ marginBottom: 20 }}\n              onMouseEnter={() => onHover(target)}\n            >\n              <Grid item xs={2}>\n                <Face colors={colors} />\n              </Grid>\n              <Grid item xs={10}>\n                <ButtonGroup\n                  key={i}\n                  variant=\"text\"\n                  aria-label=\"text primary button group\"\n                  fullWidth={true}\n                >\n                  {column.map(({ source, target, move }) => (\n                    <Button key={move} onClick={() => addMove(move, target)}>\n                      {move}\n                    </Button>\n                  ))}\n                </ButtonGroup>\n              </Grid>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n}\n","import \"@scarygami/scary-cube\";\nimport { isEmpty, delay } from 'lodash';\nimport React, { useEffect } from \"react\";\nimport TurnPicker from './TurnPicker';\nimport styled from 'styled-components';\nimport { withTheme } from 'styled-components';\nimport { useTheme } from '@material-ui/core/styles';\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            \"scary-cube\": any;\n        }\n    }\n}\n\n\nconst ScaryCube = ({ className, faces, onChange, neighbors , onHover }) => {\n    const ref = React.useRef();\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n\n        // @ts-ignore\n        ref.current.addEventListener('move-finished', () => {\n            console.log('move-finished');\n\n        });\n    }, [])\n\n    useEffect(() => {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        if (faces === undefined || isEmpty(faces)) {\n            return;\n        }\n        // @ts-ignore\n        let { current } = ref;\n        // @ts-ignore\n        if (!current.moving) {\n            // @ts-ignore\n            current.faces = faces;\n        }\n\n    }, [faces]);\n\n    function addMove(move, target) {\n        if (ref === undefined) {\n            return;\n        }\n        else if (ref.current === undefined) {\n            return;\n        }\n        // @ts-ignore\n        ref.current.addMove(move);\n        delay(() => onChange(target), 100);\n    }\n\n    return (\n        <div className={className}>\n            <scary-cube ref={ref}></scary-cube>\n            <TurnPicker key={faces} addMove={addMove} moves={neighbors} onHover={onHover} />\n        </div>\n    );\n}\n\n\nconst StyledCube = styled(ScaryCube)`\n--cube-color-u: ${({ theme }) => theme.palette.background.paper};\n--cube-color-d: ${({ theme }) => theme.palette.secondary.dark};\n--cube-color-f: ${({ theme }) => theme.palette.success.dark};\n--cube-color-b: ${({ theme }) => theme.palette.info.dark};\n--cube-color-l: ${({ theme }) => theme.palette.warning.dark};\n--cube-color-r: ${({ theme }) => theme.palette.error.dark};\nmin-height: 100%;\nmargin: auto;\n`;\n\nexport default function ThemedCube(props) {\n    let theme = useTheme();\n    return <StyledCube theme={theme} {...props} />;\n}","import { useTheme } from \"@material-ui/core/styles\";\nimport { uniq, cloneDeep as clone, now } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { SOLVED_CUBE } from \"./helpers\";\n\nlet PULSE_INTERVAL = 2000;\nexport default function ForceGraph({\n  cube,\n  path,\n  neighbors,\n  width,\n  height,\n  onClick,\n  hovered,\n}) {\n  const fgRef = useRef();\n\n  const theme = useTheme();\n\n  let [graph, setGraph] = useState({ links: [], nodes: [] });\n  let [clicked, setClicked] = useState(cube);\n  let [visited, setVisited] = useState(new Set());\n  let allNodes = new Set();\n\n  let fixNode = (nodes, id) => {\n    for (let i = 0; i < nodes.length; ++i) {\n      if (nodes[i].id !== id) continue;\n      let { index, x, y } = nodes[i];\n      nodes[index] = { ...nodes[index], fx: x, fy: y };\n      console.log(\"fixed\", id, x, y);\n      return nodes[index];\n    }\n  };\n  useEffect(() => {\n    console.log(\"useEffect!\");\n    setGraph(({ links, nodes }) => {\n      nodes.forEach(({ id }) => {\n        allNodes.add(id);\n      });\n\n      let newNodes = [cube];\n      neighbors.forEach(({ source, target }) => {\n        newNodes.push(source, target);\n      });\n      path.forEach(({ source, target }) => {\n        newNodes.push(source, target);\n      });\n\n      newNodes = uniq(newNodes).filter((id) => !allNodes.has(id));\n      let filteredLinks = [...clone(path), ...clone(neighbors)].filter(\n        ({ source, target }) => !(allNodes.has(source) && allNodes.has(target))\n      );\n\n      return {\n        nodes: [\n          ...nodes,\n          ...newNodes.map((node) => {\n            return node && node.id ? node : { id: node };\n          }),\n        ],\n        links: [...links, ...filteredLinks],\n      };\n    });\n  }, [neighbors, path]);\n\n  useEffect(() => {\n    setGraph(({ links, nodes }) => {\n      fixNode(nodes, cube);\n      return { links, nodes };\n    });\n    setClicked(cube);\n  }, [cube]);\n\n  let neighborIds = new Set(neighbors.map(({ target }) => target));\n  let pathIds = new Set([cube, ...path.map(({ target }) => target)]);\n\n  let COLORS = {\n    CURRENT: theme.palette.primary.light,\n    NEIGHBOR: theme.palette.secondary.light,\n    PATH: theme.palette.info.main,\n    OTHER: \"#333\",\n    VISITED: theme.palette.secondary.dark,\n    SOLUTION: theme.palette.success.main,\n    HOVERED: theme.palette.warning.light,\n  };\n  function getColor({ id }) {\n    if (id === SOLVED_CUBE) return COLORS.SOLUTION;\n    if (id === clicked) return COLORS.CURRENT;\n    if (id === hovered) return COLORS.HOVERED;\n    else if (neighborIds.has(id)) return COLORS.NEIGHBOR;\n    else if (pathIds.has(id)) return COLORS.PATH;\n    else if (visited.has(id)) return COLORS.VISITED;\n\n    return COLORS.OTHER;\n  }\n  function getVal({ id }) {\n    if (hovered === id) {\n      let t = now() % PULSE_INTERVAL;\n      return 1 + (t / PULSE_INTERVAL) * 4;\n    }\n    if (SOLVED_CUBE === id) {\n      return 6;\n    }\n    if (id === cube) return 5;\n    else if (visited.has(id)) return 4;\n    else if (pathIds.has(id)) return 5;\n    else if (neighborIds.has(id)) return 1;\n    return 1;\n  }\n\n  console.log(\"Graph render...\");\n  return (\n    <ForceGraph2D\n      ref={fgRef}\n      //   nodeCanvasObject={drawNode}\n      width={width}\n      height={height}\n      nodeRelSize={4}\n      graphData={graph}\n      nodeLabel=\"id\"\n      linkColor={() => \"#aaa\"}\n      linkOpacity={() => 0.05}\n      linkDirectionalParticleColor={() => \"#666\"}\n      linkDirectionalParticles={2}\n      linkDirectionalParticleSpeed={5 * 0.001}\n      onMouseLeave={() => fgRef.current.zoomToFit(100)}\n      cooldownTicks={2000}\n      cooldownTime={1500}\n      nodeColor={getColor}\n      nodeVal={getVal}\n      onNodeDragEnd={(node) => {\n        node.fx = node.x;\n        node.fy = node.y;\n      }}\n      onNodeClick={(node, event) => {\n        setGraph(({ nodes, links }) => {\n          node[node.index] = { ...node, fx: node.x, fy: node.y };\n          return { nodes, links };\n        });\n        setVisited((visited) => visited.add(node.id));\n        // setTimeout(() => {\n        //   onClick(node);\n        // }, 1500);\n      }}\n    />\n  );\n}\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Divider, Grid } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"@scarygami/scary-cube\";\nimport { gql } from \"apollo-boost\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport CubeSVG from \"./StaticCube\";\nimport { get } from 'lodash';\n\nimport { SOLVED_CUBE } from './helpers';\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: \"100%\",\n    maxHeight: '30vh',\n    overflow: 'auto'\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  //   title: {\n  //     fontSize: 14,\n  //   },\n  pos: {\n    marginBottom: 12,\n  },\n  primary: {\n    fontSize: 10,\n  },\n});\n\nexport function PathList({ source, steps, setFaces }) {\n    let [path, setPath] = useState([]);\n    const classes = useStyles();\n    useEffect(() => {\n        // The source cube has changed; see if it is in our list of steps.\n        let index = path.findIndex(({ target }) => target == source);\n        if (index < 0) {\n            // Source is a cube outside of our current path; re-start\n            setPath(steps);\n            console.log('in the path!');\n        }\n        else {\n            setPath(path.slice(index + 1));\n        }\n    }, [source, steps]);\n  return (\n\n    <Grid container>\n      {path.map(({ target, move }, i) => (\n        <Fragment key={target}>\n          {i > 0 && <Divider />}\n          <ListItem\n            button\n            key={target}\n            onClick={() => {\n              setFaces(target);\n            }}\n          >\n            {/* <ListItemIcon>\n                <CubeIcon faces={target} />\n              </ListItemIcon> */}\n            <ListItemText\n              className={classes.primary}\n              primary={`${i + 1}: ${move }`}\n              secondary={target}\n            />\n          </ListItem>\n        </Fragment>\n      ))}\n    </Grid>\n  );\n}\n\nexport default function ({ faces, setFaces }) {\n  const classes = useStyles();\n\n  const { loading, error, data } = useQuery(getSolutionPath, {\n    variables: { source: faces, target: SOLVED_CUBE },\n  });\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n          <PathList steps={get(data, 'path', [])} source={faces} setFaces={setFaces} />\n      </CardContent>\n    </Card>\n  );\n}\n","import { useRef, useCallback, useState } from 'react';\nexport function useHookWithRefCallback() {\n  const ref = useRef(null);\n  const setRef = useCallback((node) => {\n    if (ref.current) {\n      // Make sure to cleanup any events/references added to the last instance\n    }\n\n    if (node) {\n      // Check if a node is actually passed. Otherwise node would be null.\n      // You can now do what you need to, addEventListeners, measure, etc.\n    }\n\n    // Save a reference to the node\n    ref.current = node;\n  }, []);\n\n  return [setRef];\n}\n\n\nexport function useClientRect(initialValue=null) {\n    const [rect, setRect] = useState(initialValue);\n    const ref = useCallback(node => {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect());\n      }\n    }, []);\n    return [rect, ref];\n  }\n  \n\nexport default () => {};","import { ApolloProvider, useQuery } from '@apollo/react-hooks';\nimport { Box, Grid, CircularProgress } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport \"@scarygami/scary-cube\";\nimport { ApolloClient, gql, HttpLink, InMemoryCache } from 'apollo-boost';\nimport React, { useState } from 'react';\nimport './App.css';\nimport CubeController from './CubeController';\nimport Graph from './ForceGraph';\nimport Path from './PathList';\nimport Visitors from './Visitors';\nimport { cloneDeep, isEmpty, get, sample } from 'lodash';\nimport { useClientRect } from './hooks';\nimport randomCubes from './generated-cubes.json';\nimport { SOLVED_CUBE } from './helpers';\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n        uri: '/graphql',\n    })\n});\n\n\nconst getSolutionPath = gql`\n  query getSolution($source: String, $target: String) {\n      neighbors(source: $source) {\n          move, source, target\n      }\n    path(source: $source, target: $target) {\n      move\n      source\n      target\n    }\n  }\n`;\n\nconst randomCubeQuery = gql`\nquery {\n    random{\n      id\n      visitors {\n        name,\n        \n      }\n    }  \n}`\n\nfunction App() {\n    let [faces, updateFaces] = useState({ previous: null, current: sample(randomCubes) });\n\n    let setFaces = newFaces => {\n        let { current } = faces;\n        if (current !== newFaces) {\n            updateFaces(({ current }) => ({ previous: current, current: newFaces }));\n        }\n    };\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    background: {\n                        default: \"rgb(242, 245, 182)\"\n                    },\n                    type: !prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    console.log(theme);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Container faces={faces.current} previous={faces.previous || SOLVED_CUBE} setFaces={setFaces} />\n        </ThemeProvider>\n    );\n}\n\nfunction Container({ faces, setFaces, previous: prevFaces }) {\n    let [rect, ref] = useClientRect({ width: 500, height: 100 });\n    let [hovered, setHover] = useState(null);\n    const { loading, error, data } = useQuery(getSolutionPath, {\n        variables: {\n            source: faces,\n            target: prevFaces,\n        },\n    });\n    function changeFaces(newFaces) {\n        setFaces(newFaces);\n    }\n    let LEFT_WIDTH = 4;\n    return (\n        <Grid container>\n            <Grid item xs={5} className='grid'>\n                <Grid item xs={12}>\n                    <Box m={2} >\n\n                        <CubeController\n                            key={faces}\n                            faces={faces}\n                            onChange={changeFaces}\n                            neighbors={cloneDeep(get(data, 'neighbors', []))}\n                            onHover={(cube) => setHover(cube)}\n                        />\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box m={2} >\n\n                        <Path faces={faces} setFaces={changeFaces} />\n\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid item xs={7} className=\"graph\" ref={ref}>\n                <Graph\n                    cube={faces}\n                    width={rect.width}\n                    height={rect.height}\n                    path={get(data, 'path', [])}\n                    onClick={({ id }) => changeFaces(id)}\n                    hovered={hovered}\n                    neighbors={get(data, 'neighbors', [])} />\n            </Grid>\n\n\n        </Grid>\n    );\n}\n\nexport default () => (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}