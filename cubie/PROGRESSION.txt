1. write simple Flask endpoint to test cube/path solution code

2. GraphQL server with:

    - random(): Get a random cube state
    - neighbors(a): Get a list of neighbors of cube a (nodes 1 degree away)
    - path(a, b): Get a path of cubes from cube a to cube b
    - visitors(a): Get a list of user objects which have visited cube a
    - visit(a, u): Mark cube a as visited by user u (u will be the authenticated user)

3. Add authentication to easily define users. A user will be a tuple of (guid, name, external_service, external_service_id)
    e.g. (123, 'dhaffner', 'github', 'github_user111')

4. React App with Typescript/GraphQL
    - 1. get simple auth flow working to display a 'hello' to username
    - 2. add GraphQL client (Apollo?) and dump json from 'random()' query
    - 3. add ability to navigate to a given cube
    - 4. on cube-navigate
            authenticated: call 'visit(..., ...)' and show list of returned visitors
            not-authenticated: show result of 'visitors(...)' call


    - 5. on cube-navigate, show graph of cube + neighbors(cube)
    - 6. keep graph static and update its set of nodes + edges on each navigation
    - 7. keep current cube-node centered in graph and enlarged
    - 8. let cube-nodes be clickable
    - 9. embed interactive rubiks cube in centered node


